// Mocks generated by Mockito 5.4.2 from annotations
// in commit_history_mobile/test/unit_test/uses_cases/repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:commit_history_mobile/data/repository/base.dart' as _i2;
import 'package:commit_history_mobile/data/repository/repo.dart' as _i4;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseRepository_0 extends _i1.SmartFake
    implements _i2.BaseRepository {
  _FakeBaseRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepoRepository extends _i1.Mock implements _i4.RepoRepository {
  @override
  _i2.BaseRepository get baseRepository => (super.noSuchMethod(
        Invocation.getter(#baseRepository),
        returnValue: _FakeBaseRepository_0(
          this,
          Invocation.getter(#baseRepository),
        ),
        returnValueForMissingStub: _FakeBaseRepository_0(
          this,
          Invocation.getter(#baseRepository),
        ),
      ) as _i2.BaseRepository);

  @override
  _i5.Future<_i3.Response> getRepoInfo() => (super.noSuchMethod(
        Invocation.method(
          #getRepoInfo,
          [],
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #getRepoInfo,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #getRepoInfo,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> getRepoHistory() => (super.noSuchMethod(
        Invocation.method(
          #getRepoHistory,
          [],
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #getRepoHistory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #getRepoHistory,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Response>);
}
